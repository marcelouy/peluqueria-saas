using Microsoft.EntityFrameworkCore;
using PeluqueriaSaaS.Domain.Entities.Base;
using PeluqueriaSaaS.Domain.Interfaces;
using PeluqueriaSaaS.Infrastructure.Data;
using System.Linq.Expressions;

namespace PeluqueriaSaaS.Infrastructure.Repositories
{
    public class Repository<T> : IRepository<T> where T : EntityBase
    {
        protected readonly PeluqueriaDbContext _context;
        protected readonly DbSet<T> _dbSet;

        public Repository(PeluqueriaDbContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        public async Task<T?> GetByIdAsync(Guid id)
        {
            return await _dbSet.FindAsync(id);
        }

        public async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _dbSet.ToListAsync();
        }

        public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> expression)
        {
            return await _dbSet.Where(expression).ToListAsync();
        }

        public async Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> expression)
        {
            return await _dbSet.FirstOrDefaultAsync(expression);
        }

        public async Task AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
        }

        public async Task AddRangeAsync(IEnumerable<T> entities)
        {
            await _dbSet.AddRangeAsync(entities);
        }

        public void Update(T entity)
        {
            _dbSet.Update(entity);
        }

        public void Remove(T entity)
        {
            _dbSet.Remove(entity);
        }

        public void RemoveRange(IEnumerable<T> entities)
        {
            _dbSet.RemoveRange(entities);
        }

        public async Task<int> CountAsync(Expression<Func<T, bool>>? expression = null)
        {
            return expression == null 
                ? await _dbSet.CountAsync() 
                : await _dbSet.CountAsync(expression);
        }

        public async Task<bool> ExistsAsync(Expression<Func<T, bool>> expression)
        {
            return await _dbSet.AnyAsync(expression);
        }

        public async Task<IEnumerable<T>> GetPagedAsync(int pageNumber, int pageSize, Expression<Func<T, bool>>? filter = null)
        {
            var query = _dbSet.AsQueryable();
            
            if (filter != null)
                query = query.Where(filter);

            return await query
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }

        public async Task<int> GetPagedWithCountAsync(int pageNumber, int pageSize, Expression<Func<T, bool>>? filter = null)
        {
            var query = _dbSet.AsQueryable();
            
            if (filter != null)
                query = query.Where(filter);

            return await query.CountAsync();
        }

        public async Task<IEnumerable<TKey>> GetOrderedAsync<TKey>(Expression<Func<T, TKey>> orderBy, bool ascending = true)
        {
            var query = _dbSet.AsQueryable();
            
            return ascending 
                ? await query.OrderBy(orderBy).Select(orderBy).ToListAsync()
                : await query.OrderByDescending(orderBy).Select(orderBy).ToListAsync();
        }

        // Métodos adicionales para compatibilidad con Domain
        public async Task<T?> ObtenerPorIdAsync(Guid id) => await GetByIdAsync(id);
        public async Task<IEnumerable<T>> ObtenerTodosAsync() => await GetAllAsync();
        public async Task CrearAsync(T entity) => await AddAsync(entity);
        public void Actualizar(T entity) => Update(entity);
        public void Eliminar(T entity) => Remove(entity);
    }
}
