@model IEnumerable<PeluqueriaSaaS.Domain.Entities.VentaDetalle>
@{
    ViewData["Title"] = "Estaciones de Trabajo";
    var estados = ViewBag.EstadosDiccionario as Dictionary<int, PeluqueriaSaaS.Domain.Entities.EstadoServicio>;
    var empleadosDict = ViewBag.EmpleadosDict as Dictionary<int, PeluqueriaSaaS.Domain.Entities.Empleado>;
}

<div class="container-fluid py-3">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-tools text-primary"></i> Estaciones de Trabajo</h2>
            <p class="text-muted mb-0">Gestión de servicios en proceso</p>
        </div>
        <div>
            <button class="btn btn-outline-primary" onclick="location.reload();">
                <i class="fas fa-sync-alt"></i> Actualizar
            </button>
            <a href="/Estaciones/Debug" class="btn btn-outline-secondary" target="_blank">
                <i class="fas fa-bug"></i> Debug
            </a>
        </div>
    </div>

    <!-- Tarjetas de servicios -->
    <div class="row" id="servicios-container">
        @foreach (var detalle in Model)
        {
            var estado = estados?.GetValueOrDefault(detalle.EstadoServicioId);
            var colorEstado = GetColorEstado(detalle.EstadoServicioId);
            var iconoEstado = GetIconoEstado(detalle.EstadoServicioId);
            
            // Obtener el empleado asignado usando EmpleadoAsignadoId o EmpleadoServicio
            string empleadoInfo = "Sin Asignar";
            
            // Primero intentar con EmpleadoServicio (navigation property)
            if (detalle.EmpleadoServicio != null)
            {
                empleadoInfo = $"{detalle.EmpleadoServicio.Nombre} {detalle.EmpleadoServicio.Apellido}";
            }
            // Si no, usar EmpleadoAsignadoId para buscar en el diccionario
            else if (detalle.EmpleadoAsignadoId.HasValue && empleadosDict != null)
            {
                if (empleadosDict.TryGetValue(detalle.EmpleadoAsignadoId.Value, out var empleado))
                {
                    empleadoInfo = $"{empleado.Nombre} {empleado.Apellido}";
                }
                else
                {
                    empleadoInfo = $"Empleado ID: {detalle.EmpleadoAsignadoId}";
                }
            }
            
            <div class="col-md-6 col-lg-4 mb-3 servicio-card" data-detalle-id="@detalle.VentaDetalleId">
                <div class="card h-100 @(detalle.EstadoServicioId == 2 ? "border-primary border-2 shadow" : "")">
                    <!-- Header con empleado asignado -->
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="fas fa-user-tie text-primary"></i>
                                <strong>@empleadoInfo</strong>
                            </div>
                            <span class="badge @colorEstado estado-badge">
                                @iconoEstado @estado?.Nombre
                            </span>
                        </div>
                    </div>
                    
                    <!-- Cuerpo de la tarjeta -->
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <i class="fas fa-cut text-secondary"></i> @(detalle.Servicio?.Nombre ?? detalle.NombreServicio)
                        </h5>
                        
                        <div class="card-text">
                            <!-- Información del cliente y precio -->
                            <div class="info-section mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-user text-info me-2" style="width: 20px;"></i>
                                    <span><strong>Cliente:</strong> @(detalle.Venta?.Cliente?.NombreCompleto ?? "Cliente")</span>
                                </div>
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-dollar-sign text-success me-2" style="width: 20px;"></i>
                                    <span><strong>Precio:</strong> $@detalle.PrecioUnitario.ToString("N2")</span>
                                </div>
                                @if (detalle.Cantidad > 1)
                                {
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-times-circle text-warning me-2" style="width: 20px;"></i>
                                        <span><strong>Cantidad:</strong> @detalle.Cantidad</span>
                                    </div>
                                }
                            </div>
                            
                            <!-- Información de tiempo -->
                            <div class="tiempo-info p-2 rounded bg-light">
                                @if (detalle.InicioServicio.HasValue)
                                {
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="fas fa-play-circle text-success"></i> 
                                            Iniciado: @detalle.InicioServicio.Value.ToString("HH:mm")
                                        </small>
                                        <div class="timer-display" data-inicio="@detalle.InicioServicio.Value.ToString("o")">
                                            <span class="badge bg-info">
                                                <i class="fas fa-hourglass-half"></i>
                                                <span class="timer-text">0m</span>
                                            </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <small class="text-muted">
                                        <i class="fas fa-pause-circle"></i> Esperando inicio
                                    </small>
                                }
                            </div>

                            <!-- Notas del servicio si existen -->
                            @if (!string.IsNullOrEmpty(detalle.NotasServicio))
                            {
                                <div class="mt-2 p-2 bg-warning bg-opacity-10 rounded">
                                    <small><i class="fas fa-sticky-note text-warning"></i> @detalle.NotasServicio</small>
                                </div>
                            }
                        </div>
                        
                        <!-- Dropdown para cambiar estado -->
                        <div class="estado-control mt-3">
                            <select class="form-select estado-select" 
                                    data-detalle-id="@detalle.VentaDetalleId" 
                                    data-estado-actual="@detalle.EstadoServicioId"
                                    data-empleado-id="@detalle.EmpleadoServicioId">
                                <option value="">-- Cambiar Estado --</option>
                                @foreach (var estadoOption in GetEstadosDisponibles(detalle.EstadoServicioId))
                                {
                                    <option value="@estadoOption.Value">@estadoOption.Text</option>
                                }
                            </select>
                            
                            <!-- NUEVO: Botón para cambiar empleado -->
                            <button class="btn btn-sm btn-outline-warning mt-2 w-100" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#cambiarEmpleadoModal"
                                    onclick="prepararCambioEmpleado(@detalle.VentaDetalleId, '@empleadoInfo', '@(detalle.Servicio?.Nombre ?? detalle.NombreServicio)')">
                                <i class="fas fa-user-edit"></i> Cambiar Empleado
                            </button>
                        </div>
                    </div>
                    
                    <!-- Footer con ID del servicio -->
                    <div class="card-footer text-muted small text-center">
                        <i class="fas fa-hashtag"></i> Servicio #@detalle.VentaDetalleId
                        | Venta #@detalle.VentaId
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center shadow">
            <i class="fas fa-info-circle fa-3x mb-3"></i>
            <h5>No hay servicios activos en este momento</h5>
            <p class="mb-3">Los servicios asignados aparecerán aquí automáticamente cuando se creen.</p>
            <div class="d-flex gap-2 justify-content-center">
                <a href="/Ventas/AsignacionRapida" class="btn btn-primary">
                    <i class="fas fa-rocket"></i> Asignación Rápida
                </a>
                <a href="/Ventas/POS" class="btn btn-outline-primary">
                    <i class="fas fa-cash-register"></i> Ir al POS
                </a>
            </div>
        </div>
    }
</div>

<!-- Modal para cambiar empleado -->
<div class="modal fade" id="cambiarEmpleadoModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit"></i> Cambiar Empleado Asignado
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Servicio: <strong id="servicioNombre"></strong></p>
                <p>Empleado actual: <strong id="empleadoActual"></strong></p>
                
                <div class="mt-3">
                    <label class="form-label">Seleccionar nuevo empleado:</label>
                    <select id="nuevoEmpleadoSelect" class="form-select">
                        <option value="">-- Seleccionar Empleado --</option>
                        @if (empleadosDict != null)
                        {
                            @foreach (var emp in empleadosDict.Values.OrderBy(e => e.Nombre))
                            {
                                <option value="@emp.Id">@emp.Nombre @emp.Apellido</option>
                            }
                        }
                    </select>
                </div>
                
                <input type="hidden" id="ventaDetalleIdModal" value="">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmarCambioEmpleado()">
                    <i class="fas fa-save"></i> Confirmar Cambio
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetColorEstado(int estadoId)
    {
        return estadoId switch
        {
            1 => "bg-warning text-dark", // Esperando
            2 => "bg-primary",            // En Proceso
            3 => "bg-success",            // Completado
            4 => "bg-danger",             // Cancelado
            _ => "bg-secondary"
        };
    }

    string GetIconoEstado(int estadoId)
    {
        return estadoId switch
        {
            1 => "⏳",  // Esperando
            2 => "🔄",  // En Proceso
            3 => "✅",  // Completado
            4 => "❌",  // Cancelado
            _ => "❓"
        };
    }

    List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEstadosDisponibles(int estadoActual)
    {
        var opciones = new List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>();
        
        switch (estadoActual)
        {
            case 1: // Esperando
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("🔄 Iniciar Trabajo", "2"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("❌ Cancelar", "4"));
                break;
            case 2: // En Proceso
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("✅ Completar", "3"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("⏸️ Volver a Espera", "1"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("❌ Cancelar", "4"));
                break;
            default:
                // Estados finales no tienen opciones
                break;
        }
        
        return opciones;
    }
}

@section Scripts {
    <script src="~/js/estaciones.js"></script>
}