@model IEnumerable<PeluqueriaSaaS.Domain.Entities.VentaDetalle>
@{
    ViewData["Title"] = "Estaciones de Trabajo";
    var estados = ViewBag.EstadosDiccionario as Dictionary<int, PeluqueriaSaaS.Domain.Entities.EstadoServicio>;
}

<div class="container-fluid py-3">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-tools text-primary"></i> Estaciones de Trabajo</h2>
            <p class="text-muted mb-0">Gesti√≥n de servicios en proceso</p>
        </div>
        <div>
            <button class="btn btn-outline-primary" onclick="location.reload();">
                <i class="fas fa-sync-alt"></i> Actualizar
            </button>
        </div>
    </div>

    <!-- Tarjetas de servicios -->
    <div class="row" id="servicios-container">
        @foreach (var detalle in Model)
        {
            var estado = estados?.GetValueOrDefault(detalle.EstadoServicioId);
            var colorEstado = GetColorEstado(detalle.EstadoServicioId);
            var iconoEstado = GetIconoEstado(detalle.EstadoServicioId);
            
            <div class="col-md-6 col-lg-4 mb-3 servicio-card" data-detalle-id="@detalle.VentaDetalleId">
                <div class="card h-100 @(detalle.EstadoServicioId == 2 ? "border-primary border-2" : "")">
                    <!-- Header con estado -->
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span class="badge bg-info">
                            <i class="fas fa-hashtag"></i> Servicio #@detalle.VentaDetalleId
                        </span>
                        <span class="badge @colorEstado estado-badge">
                            @iconoEstado @estado?.Nombre
                        </span>
                    </div>
                    
                    <!-- Cuerpo de la tarjeta -->
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-cut"></i> @(detalle.Servicio?.Nombre ?? "Servicio")
                        </h5>
                        
                        <div class="card-text">
                            <div class="mb-2">
                                <strong>Cliente:</strong> @(detalle.Venta?.Cliente?.NombreCompleto ?? "Cliente")<br>
                                <strong>Precio:</strong> $@detalle.PrecioUnitario.ToString("N2")<br>
                                <strong>Cantidad:</strong> @detalle.Cantidad
                            </div>
                            
                            <!-- Informaci√≥n de tiempo -->
                            <div class="tiempo-info mb-3">
                                @if (detalle.InicioServicio.HasValue)
                                {
                                    <small class="text-muted">
                                        <i class="fas fa-clock"></i> Iniciado: @detalle.InicioServicio.Value.ToString("HH:mm")
                                    </small>
                                    <div class="timer-display" data-inicio="@detalle.InicioServicio.Value.ToString("o")">
                                        <i class="fas fa-hourglass-half"></i> 
                                        <span class="timer-text">Calculando...</span>
                                    </div>
                                }
                                else
                                {
                                    <small class="text-muted">
                                        <i class="fas fa-clock"></i> En espera
                                    </small>
                                }
                            </div>
                        </div>
                        
                        <!-- Dropdown para cambiar estado -->
                        <div class="estado-control">
                            <label class="form-label small">Cambiar Estado:</label>
                            <select class="form-select estado-select" 
                                    data-detalle-id="@detalle.VentaDetalleId" 
                                    data-estado-actual="@detalle.EstadoServicioId">
                                <option value="">-- Seleccionar Acci√≥n --</option>
                                @foreach (var estadoOption in GetEstadosDisponibles(detalle.EstadoServicioId))
                                {
                                    <option value="@estadoOption.Value">@estadoOption.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle fa-2x mb-2"></i>
            <h5>No hay servicios activos</h5>
            <p>Los servicios asignados aparecer√°n aqu√≠ autom√°ticamente.</p>
            <a href="/Ventas/AsignacionRapida" class="btn btn-primary">
                <i class="fas fa-plus"></i> Asignar Servicios
            </a>
        </div>
    }
</div>

@functions {
    string GetColorEstado(int estadoId)
    {
        return estadoId switch
        {
            1 => "bg-warning text-dark", // Esperando
            2 => "bg-primary",            // En Proceso
            3 => "bg-success",            // Completado
            4 => "bg-danger",             // Cancelado
            _ => "bg-secondary"
        };
    }

    string GetIconoEstado(int estadoId)
    {
        return estadoId switch
        {
            1 => "‚è≥",  // Esperando
            2 => "üîÑ",  // En Proceso
            3 => "‚úÖ",  // Completado
            4 => "‚ùå",  // Cancelado
            _ => "‚ùì"
        };
    }

    List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEstadosDisponibles(int estadoActual)
    {
        var opciones = new List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>();
        
        switch (estadoActual)
        {
            case 1: // Esperando
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("üîÑ Iniciar Trabajo", "2"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("‚ùå Cancelar", "4"));
                break;
            case 2: // En Proceso
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("‚úÖ Completar", "3"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("‚è∏Ô∏è Volver a Espera", "1"));
                opciones.Add(new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem("‚ùå Cancelar", "4"));
                break;
            case 3: // Completado
                // No hay opciones para completados (no deber√≠an mostrarse)
                break;
            case 4: // Cancelado
                // No hay opciones para cancelados (no deber√≠an mostrarse)
                break;
        }
        
        return opciones;
    }
}

@section Scripts {
    <script src="~/js/estaciones.js"></script>
}