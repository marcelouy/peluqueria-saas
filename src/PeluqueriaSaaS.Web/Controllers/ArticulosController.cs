using Microsoft.AspNetCore.Mvc;
using PeluqueriaSaaS.Domain.Entities;
using PeluqueriaSaaS.Domain.Interfaces;

namespace PeluqueriaSaaS.Web.Controllers
{
    public class ArticulosController : Controller
    {
        private readonly IArticuloRepository _articuloRepository;
        private const string TENANT_ID = "1"; // Para filtros y validaciones

        public ArticulosController(IArticuloRepository articuloRepository)
        {
            _articuloRepository = articuloRepository;
        }

        // GET: Articulos
        public async Task<IActionResult> Index()
        {
            var articulos = await _articuloRepository.GetAllAsync(TENANT_ID);
            return View(articulos);
        }

        // GET: Articulos/Details/5
        public async Task<IActionResult> Details(int id)
        {
            var articulo = await _articuloRepository.GetByIdAsync(id, TENANT_ID);
            if (articulo == null)
            {
                TempData["Error"] = "Art√≠culo no encontrado";
                return RedirectToAction(nameof(Index));
            }
            return View(articulo);
        }

        // GET: Articulos/Create
        public async Task<IActionResult> Create()
        {
            await PrepararDropdownData();
            return View();
        }

        // POST: Articulos/Create - ‚úÖ VERSI√ìN CON DEBUGGING + FIX TENANTID
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Articulo articulo)
        {
            Console.WriteLine($"üîß POST Create recibido - Nombre: {articulo.Nombre}, Precio: {articulo.Precio}");
            
            // ‚úÖ FIX: Remover error TenantId del ModelState (Repository lo asignar√°)
            ModelState.Remove("TenantId");
            
            if (ModelState.IsValid)
            {
                Console.WriteLine("‚úÖ ModelState v√°lido");
                
                // Validar c√≥digo √∫nico
                if (!string.IsNullOrEmpty(articulo.Codigo))
                {
                    if (await _articuloRepository.ExisteCodigo(articulo.Codigo, TENANT_ID))
                    {
                        Console.WriteLine($"‚ùå C√≥digo duplicado: {articulo.Codigo}");
                        ModelState.AddModelError("Codigo", "Ya existe un art√≠culo con este c√≥digo");
                        await PrepararDropdownData();
                        return View(articulo);
                    }
                }

                Console.WriteLine("üîß Llamando Repository.CreateAsync...");
                // ‚úÖ Repository maneja TenantId autom√°ticamente
                var result = await _articuloRepository.CreateAsync(articulo);
                Console.WriteLine($"‚úÖ Repository retorn√≥ art√≠culo ID: {result.Id}");
                
                TempData["Success"] = "Art√≠culo creado exitosamente";
                return RedirectToAction(nameof(Index));
            }
            else
            {
                Console.WriteLine("‚ùå ModelState inv√°lido:");
                foreach (var error in ModelState)
                {
                    Console.WriteLine($"   {error.Key}: {string.Join(", ", error.Value.Errors.Select(e => e.ErrorMessage))}");
                }
            }

            await PrepararDropdownData();
            return View(articulo);
        }

        // GET: Articulos/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var articulo = await _articuloRepository.GetByIdAsync(id, TENANT_ID);
            if (articulo == null)
            {
                TempData["Error"] = "Art√≠culo no encontrado";
                return RedirectToAction(nameof(Index));
            }

            await PrepararDropdownData();
            return View(articulo);
        }

        // POST: Articulos/Edit/5 - ‚úÖ VERSI√ìN SIMPLIFICADA
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(Articulo articulo)
        {
            Console.WriteLine($"üîß POST Edit recibido - Art√≠culo ID: {articulo.Id}, Nombre: {articulo.Nombre}");
            
            // ‚úÖ FIX: Remover error TenantId del ModelState (igual que CREATE)
            ModelState.Remove("TenantId");
            Console.WriteLine("‚úÖ TenantId removido del ModelState");

            if (ModelState.IsValid)
            {
                Console.WriteLine("‚úÖ ModelState v√°lido para UPDATE");
                
                // ‚úÖ FIX: Validaci√≥n c√≥digo solo si CAMBI√ì desde original
                if (!string.IsNullOrEmpty(articulo.Codigo))
                {
                    // Obtener art√≠culo original para comparar c√≥digo
                    var articuloOriginal = await _articuloRepository.GetByIdAsync(articulo.Id, TENANT_ID);
                    
                    // Solo validar si c√≥digo cambi√≥
                    if (articuloOriginal != null && articulo.Codigo != articuloOriginal.Codigo)
                    {
                        Console.WriteLine($"üîç C√≥digo cambi√≥ de '{articuloOriginal.Codigo}' a '{articulo.Codigo}' - validando unicidad...");
                        
                        if (await _articuloRepository.ExisteCodigo(articulo.Codigo, TENANT_ID))
                        {
                            Console.WriteLine($"‚ùå C√≥digo duplicado en UPDATE: {articulo.Codigo}");
                            ModelState.AddModelError("Codigo", "Ya existe un art√≠culo con este c√≥digo");
                            await PrepararDropdownData();
                            return View(articulo);
                        }
                    }
                    else
                    {
                        Console.WriteLine($"‚úÖ C√≥digo no cambi√≥ ('{articulo.Codigo}') - omitiendo validaci√≥n");
                    }
                }

                Console.WriteLine("üîß Llamando Repository.UpdateAsync...");
                // ‚úÖ Repository maneja TenantId autom√°ticamente
                var result = await _articuloRepository.UpdateAsync(articulo);
                Console.WriteLine($"‚úÖ Repository UPDATE exitoso - ID: {result.Id}");
                
                TempData["Success"] = "Art√≠culo actualizado exitosamente";
                return RedirectToAction(nameof(Index));
            }
            else
            {
                Console.WriteLine("‚ùå ModelState inv√°lido en UPDATE:");
                foreach (var error in ModelState)
                {
                    Console.WriteLine($"   {error.Key}: {string.Join(", ", error.Value.Errors.Select(e => e.ErrorMessage))}");
                }
            }

            await PrepararDropdownData();
            return View(articulo);
        }

        // POST: Articulos/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var result = await _articuloRepository.DeleteAsync(id, TENANT_ID);
            
            if (result)
            {
                TempData["Success"] = "Art√≠culo eliminado exitosamente";
            }
            else
            {
                TempData["Error"] = "No se pudo eliminar el art√≠culo";
            }
            
            return RedirectToAction(nameof(Index));
        }

        // AJAX: Verificar disponibilidad c√≥digo
        [HttpGet]
        public async Task<JsonResult> VerificarCodigo(string codigo, int? id)
        {
            if (string.IsNullOrEmpty(codigo))
                return Json(true);

            var existe = await _articuloRepository.ExisteCodigo(codigo, TENANT_ID, id);
            return Json(!existe);
        }

        // GET: Articulos/BajoStock
        public async Task<IActionResult> BajoStock()
        {
            var articulos = await _articuloRepository.GetBajoStockAsync(TENANT_ID);
            ViewBag.ModoFiltro = "BajoStock";
            return View("Index", articulos);
        }

        // M√©todo auxiliar para dropdowns
        private async Task PrepararDropdownData()
        {
            try
            {
                ViewBag.Categorias = await _articuloRepository.GetCategoriasAsync(TENANT_ID);
                ViewBag.Marcas = await _articuloRepository.GetMarcasAsync(TENANT_ID);
                ViewBag.Proveedores = await _articuloRepository.GetProveedoresAsync(TENANT_ID);
            }
            catch (Exception)
            {
                // Si falla, inicializar con listas vac√≠as
                ViewBag.Categorias = new List<string>();
                ViewBag.Marcas = new List<string>();
                ViewBag.Proveedores = new List<string>();
            }
        }
    }
}