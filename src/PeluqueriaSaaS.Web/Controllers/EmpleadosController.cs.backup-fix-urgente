using Microsoft.AspNetCore.Mvc;
using PeluqueriaSaaS.Domain.Interfaces;
using PeluqueriaSaaS.Domain.Entities;

namespace PeluqueriaSaaS.Web.Controllers;

public class EmpleadosController : Controller
{
    private readonly IEmpleadoRepository _empleadoRepository;

    public EmpleadosController(IEmpleadoRepository empleadoRepository)
    {
        _empleadoRepository = empleadoRepository;
    }

    // GET: Empleados
    public async Task<IActionResult> Index()
    {
        var empleados = await _empleadoRepository.GetAllAsync();
        return View(empleados);
    }

    // GET: Empleados/Details/5
    public async Task<IActionResult> Details(int id)
    {
        var empleado = await _empleadoRepository.GetByIdAsync(id);
        if (empleado == null)
        {
            return NotFound();
        }
        return View(empleado);
    }

    // GET: Empleados/Create
    public IActionResult Create()
    {
        return View();
    }

    // POST: Empleados/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Create(Empleado empleado)
    {
        if (ModelState.IsValid)
        {
            await _empleadoRepository.CreateAsync(empleado);
            return RedirectToAction(nameof(Index));
        }
        return View(empleado);
    }

    // GET: Empleados/Edit/5
    public async Task<IActionResult> Edit(int id)
    {
        var empleado = await _empleadoRepository.GetByIdAsync(id);
        if (empleado == null)
        {
            return NotFound();
        }
        return View(empleado);
    }

    // POST: Empleados/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(int id, Empleado empleado)
    {
        if (id != empleado.Id)
        {
            return NotFound();
        }

        if (ModelState.IsValid)
        {
            await _empleadoRepository.UpdateAsync(empleado);
            return RedirectToAction(nameof(Index));
        }
        return View(empleado);
    }

    // GET: Empleados/Delete/5
    public async Task<IActionResult> Delete(int id)
    {
        var empleado = await _empleadoRepository.GetByIdAsync(id);
        if (empleado == null)
        {
            return NotFound();
        }
        return View(empleado);
    }

    // POST: Empleados/Delete/5
    [HttpPost, ActionName("Delete")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        await _empleadoRepository.DeleteAsync(id);
        return RedirectToAction(nameof(Index));
    }
}
